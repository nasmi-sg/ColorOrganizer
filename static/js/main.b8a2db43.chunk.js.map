{"version":3,"sources":["Components/Star.js","Components/StarsRating.js","Components/Colors.js","Components/Modal.js","Components/ModalToggler.js","Components/TopBar.js","constants.js","App.js","actions.js","serviceWorker.js","reducers.js","data.js","index.js"],"names":["Star","_ref","_ref$selected","selected","_ref$onClick","onClick","f","react_default","a","createElement","xmlns","width","height","viewBox","id","data-name","transform","className","d","StarsRating","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedStars","changeRating","bind","assertThisInitialized","setState","changeColorRating","colorId","_this2","totalStars","toConsumableArray","Array","map","number","i","Star_Star","key","Component","Colors","colors","removeColor","copyColorHex","length","color","style","backgroundColor","concat","title","Components_StarsRating","rating","src","alt","Modal","addColor","e","preventDefault","Math","floor","random","nameInput","current","value","colorInput","close","React","createRef","onSubmit","type","placeholder","ref","ModalToggler","toggle","prevState","active","activeClass","modalClass","Fragment","Components_Modal","TopBar","orderType","switchOrderType","changeSearchQuery","Components_ModalToggler","onChange","target","defaultValue","constants","SEARCH_COLORS","ADD_COLOR","RATE_COLOR","REMOVE_COLOR","ORDER_COLORS","App","orderColors","query","searchColors","saveColorsLocalStorage","localStorage","removeItem","setItem","JSON","stringify","setupBeforeUnloadListener","window","addEventListener","ev","el","document","setAttribute","position","left","getElementById","appendChild","select","execCommand","alert","removeChild","orderedColors","sort","b","console","log","searchQuery","filter","toLowerCase","includes","TopBar_TopBar","isLoading","Colors_Colors","rateColor","connect","mainReducer","searchReducer","dispatch","Constants","payload","Boolean","location","hostname","match","storageColors","getItem","initialState","parse","searchState","logger","createLogger","rootReducer","combineReducers","arguments","undefined","action","objectSpread","newColors","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8a2db43.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const Star = ({selected=false, onClick=f=>f}) => {\n   return (\n    <svg onClick={onClick} xmlns=\"http://www.w3.org/2000/svg\" width=\"30.131\" height=\"28.683\" viewBox=\"0 0 30.131 28.683\">\n    <g id=\"Grupo_5\" data-name=\"Grupo 5\" transform=\"translate(0 0)\">\n      <g id=\"Grupo_4\" data-name=\"Grupo 4\" transform=\"translate(0 0)\">\n        <g id=\"Grupo_3\" data-name=\"Grupo 3\" transform=\"translate(0 0)\">\n          <path id=\"Caminho_6\" data-name=\"Caminho 6\" className={selected ? 'star selected' : 'star'} d=\"M18.844,53.318a.248.248,0,0,1-.235-.325l3.466-10.6-9.036-6.541a.248.248,0,0,1,.145-.448h0l11.154.021,3.427-10.616a.248.248,0,0,1,.471,0l3.427,10.616L42.82,35.4h0a.248.248,0,0,1,.145.448l-9.038,6.541,3.461,10.58a.248.248,0,0,1-.227.348h0a.247.247,0,0,1-.146-.048L28,46.7,18.99,53.271A.247.247,0,0,1,18.844,53.318Z\" transform=\"translate(-12.937 -24.635)\"/>\n        </g>\n      </g>\n    </g>\n  </svg>\n   )\n}\n\nStar.propTypes = {\n    selected: PropTypes.bool.isRequired,\n    onClick: PropTypes.func.isRequired\n}","import React, {Component} from 'react'\nimport {Star} from './Star.js'\nimport PropTypes from 'prop-types'\n\nclass StarsRating extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            selectedStars: 0\n        }\n        this.changeRating = this.changeRating.bind(this)\n    }\n\n    changeRating(selectedStars){\n        this.setState({selectedStars})\n        this.props.changeColorRating(this.props.colorId, selectedStars)\n    }\n\n    componentDidMount(){\n        this.setState({selectedStars: this.props.selectedStars})\n    }\n\n    render(){\n        const {totalStars} = this.props\n        const {selectedStars} = this.state\n        return (\n            <div className=\"star-rating\">\n                {[...Array(totalStars)].map((number, i) => \n                    <Star key={i} \n                        selected={i<selectedStars} \n                        onClick={() => this.changeRating(i+1)} \n                    />\n                )\n                }\n            </div>\n        )\n    }\n}\n\nexport default StarsRating\n\nStarsRating.propTypes = {\n    totalStars: PropTypes.number,\n    selectedStars: PropTypes.number,\n    colorId: PropTypes.number,\n    changeColorRating: PropTypes.func\n}","import React from 'react'\nimport StarsRating from './StarsRating'\n\nexport const Colors = ({colors, changeColorRating, removeColor, copyColorHex}) => {\n   return (\n       <div className=\"colors-list\">\n       {colors.length > 0 ? \n        colors.map(color => {\n            return (\n                <div className=\"single-cart\" key={color.id}>\n                    <div className=\"cart-color\" onClick={() => copyColorHex(color.color)} style={{backgroundColor: `${color.color}`}}></div>\n                    <div className=\"cart-info\">\n                        <h3>{color.title}</h3>\n                        <span onClick={() => copyColorHex(color.color)}>{color.color}</span>\n                    </div>\n                    <StarsRating \n                        totalStars={5} \n                        selectedStars={color.rating}\n                        colorId={color.id} \n                        changeColorRating={changeColorRating}\n                    />\n                    <div className=\"cart-trash\" onClick={() => removeColor(color.id)}>\n                        <img src=\"fx/lixo.svg\" alt=\"Lixo\" />\n                    </div>\n                </div>\n            )\n        })\n        :\n        <div>Loading..</div>\n        }\n       </div>\n   )\n}","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\n\nclass Modal extends Component{\n    constructor(props){\n        super(props)\n        this.nameInput = React.createRef();\n        this.colorInput = React.createRef();\n    }\n\n    addColor = (e) => {\n        e.preventDefault()\n        var color = {\n            id: Math.floor(Math.random() * (100000 - 6) + 6),\n            title:this.nameInput.current.value,\n            color:this.colorInput.current.value,\n            rating:0\n        }\n        this.props.addColor(color)\n        this.nameInput.current.value = ''\n        this.colorInput.current.value = ''\n        this.props.close()\n    }\n\n    render(){\n        return (\n            <div className={this.props.className}>\n                <button className=\"close-modal\" onClick={this.props.close}>&#215;</button>\n                <h4>Add a color to your list</h4>\n                <form onSubmit={this.addColor}>\n                    <input \n                        type=\"text\" \n                        placeholder=\"Color name\" \n                        className=\"name-input\" \n                        ref={this.nameInput}\n                    />\n                    <input \n                        type=\"color\" \n                        className=\"color-input\"\n                        ref={this.colorInput}\n                    />\n                    <button className=\"btn btn-form\">Add</button>\n                </form>\n            </div>\n        )\n    }\n    \n}\n\nexport default Modal\n\nModal.propTypes = {\n    className: PropTypes.string.isRequired\n}","import React, {Component} from 'react'\nimport Modal from './Modal.js'\nimport PropTypes from 'prop-types'\n\nclass ModalToggler extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            active: false\n        }\n    }\n\n    toggle = () => {\n        this.setState(prevState => ({active: !prevState.active}))\n    }\n\n    close = () => { \n        this.setState({active: false})\n    }\n\n    render(){\n        var activeClass = this.state.active ? 'active' : 'notactive'\n        var modalClass = `modal modal-`+this.props.type+` `+activeClass\n        return (\n            <>\n                <span onClick={this.toggle}>Add a Color</span>\n                <Modal className={modalClass} addColor={this.props.addColor} close={this.close}/>\n            </>\n            )\n    }\n}\n\nexport default ModalToggler\n\nModalToggler.propTypes = {\n    type: PropTypes.string,\n    addColor: PropTypes.func.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport ModalToggler from './ModalToggler'\n\nexport const TopBar = ({orderType, switchOrderType, changeSearchQuery, addColor}) => {\n    var handleSearchEvent = (e) => {\n        changeSearchQuery(e.target.value)\n    }\n    var handleOrderEvent = (e) => {\n        switchOrderType(e.target.value)\n    }\n    return (\n        <div className=\"topbar\">\n            <div className=\"add-color\">\n                <ModalToggler type=\"add\" addColor={addColor}/>\n            </div>\n            <div className=\"search-bar\">\n                <div className=\"searchbardiv\"><input className=\"searchinput\" type=\"text\" onChange={handleSearchEvent} placeholder=\"Search\"/></div>\n                <img src=\"./fx/lupa.svg\" alt=\"search\"/>\n            </div>\n            <div className=\"order-type\">\n                <select defaultValue={orderType} onChange={handleOrderEvent} className=\"select-css\">\n                    <option value=\"rating\">Order by Rating</option>\n                    <option value=\"name\">Order by Name</option>\n                </select>\n            </div>\n        </div>\n    )\n}\n\nTopBar.propTypes = {\n    orderType: PropTypes.string,\n    switchOrderType: PropTypes.func,\n    changeSearchQuery: PropTypes.func,\n    addColor: PropTypes.func\n}\n\n","const constants = {\n    SEARCH_COLORS: \"SEARCH_COLORS\",\n    ADD_COLOR: \"ADD_COLOR\",\n    RATE_COLOR: \"RATE_COLOR\",\n    REMOVE_COLOR: \"REMOVE_COLOR\",\n    ORDER_COLORS: \"ORDER_COLORS\",\n}\n\nexport default constants","import React, { Component } from 'react'\nimport {Colors} from './Components/Colors'\nimport {TopBar} from './Components/TopBar'\nimport {connect} from 'react-redux'\nimport {addColor, removeColor, rateColor, orderColors, searchColors} from './actions'\n\nconst mapStateToProps = state => {\n  return {\n    colors: state.mainReducer.colors,\n    orderType: state.mainReducer.orderType,\n    searchQuery: state.searchReducer.searchQuery,\n    isLoading: state.mainReducer.isLoading\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return{\n    addColor: (color) => dispatch(addColor(color)),\n    orderColors: (type) => dispatch(orderColors(type)),\n    removeColor: (id) => dispatch(removeColor(id)),\n    rateColor: (id, rating) => dispatch(rateColor(id, rating)),\n    searchColors: (query) => dispatch(searchColors(query))\n  }\n}\n\nclass App extends Component {\n\n  switchOrderType = (type) => {\n    this.props.orderColors(type)\n  }\n\n  changeSearchQuery = (query) => {\n    this.props.searchColors(query)\n  }\n\n  saveColorsLocalStorage = () => {\n    localStorage.removeItem('colors')\n    localStorage.setItem('colors', JSON.stringify(this.props.colors))\n  }\n\n  setupBeforeUnloadListener = () => {\n    window.addEventListener(\"beforeunload\", (ev) => {\n        ev.preventDefault();\n        return this.saveColorsLocalStorage();\n    });\n  };\n\n  copyColorHex = (color) => {\n    var el = document.createElement('textarea');\n    el.value = color;\n    el.setAttribute('readonly', '');\n    el.style = {position: 'absolute', left: '-9999px'};\n    document.getElementById('copy-textarea').appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    alert('Color copied!')\n    document.getElementById('copy-textarea').removeChild(el);\n  }\n\n  componentDidMount(){\n    this.setupBeforeUnloadListener()\n  }\n\n  render(){\n    var orderedColors\n    switch(this.props.orderType){\n      case 'rating':\n      orderedColors = this.props.colors.sort((a, b) => (a.rating < b.rating) ? 1 : -1)\n      break\n\n      case 'name':\n      orderedColors = this.props.colors.sort((a, b) => (a.title > b.title) ? 1 : -1)\n      break\n\n      default:\n      orderedColors = this.props.colors.sort((a, b) => (a.rating < b.rating) ? 1 : -1)\n    }\n    console.log(this.props.searchQuery)\n    orderedColors = this.props.searchQuery !== '' ? orderedColors.filter(color => color.title.toLowerCase().includes(this.props.searchQuery.toLowerCase())) : orderedColors\n\n    return (\n      <div className=\"App\">\n        <div className=\"logo\">\n          <h1><strong>COLOR</strong>ORGNZR</h1>\n        </div>\n        <TopBar \n          orderType={this.props.orderType} \n          switchOrderType={this.switchOrderType}\n          changeSearchQuery={this.changeSearchQuery}\n          addColor={this.props.addColor}\n        />\n        {this.props.isLoading ?\n          <h4>Loading...</h4>\n          :\n          <>\n            <Colors \n              colors={orderedColors} \n              changeColorRating={this.props.rateColor}\n              removeColor={this.props.removeColor}\n              copyColorHex={this.copyColorHex}\n            />\n            <div id=\"copy-textarea\"></div>\n          </>\n        }\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import Constants from './constants'\n\nexport const addColor = color => ({\n    type: Constants.ADD_COLOR,\n    payload: color\n})\n\nexport const removeColor = id => ({\n    type:Constants.REMOVE_COLOR,\n    payload: id\n})\n\nexport const rateColor = (id, rating) => ({\n    type: Constants.RATE_COLOR,\n    payload: {id: id, rating: rating}\n})\n\nexport const orderColors = (type) => ({\n    type: Constants.ORDER_COLORS,\n    payload: type\n})\n\nexport const searchColors = (query) => ({\n    type: Constants.SEARCH_COLORS,\n    payload: query\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Constants from './constants'\nimport {defaultColors} from './data'\n\nvar storageColors = localStorage.getItem('colors') === 'undefined' || null ? null : localStorage.getItem('colors')\n\nvar initialState = {\n    colors: storageColors === null ? defaultColors : JSON.parse(storageColors),\n    orderType: 'name',\n    isLoading: false\n}\n\nexport const mainReducer = (state = initialState, action = {}) => {\n    switch(action.type){\n        case Constants.ORDER_COLORS:\n            return {\n                ...state,\n                orderType: action.payload\n            }\n\n        case Constants.ADD_COLOR:\n            return {\n                ...state,\n                colors: [...state.colors, action.payload]\n            }\n\n        case Constants.REMOVE_COLOR:\n            return{\n                ...state,\n                colors: state.colors.filter(color => color.id != action.payload)\n            }\n\n        case Constants.RATE_COLOR:\n            const newColors = state.colors.map(color => {\n                if (color.id !== action.payload.id) return color\n                console.log(Object.assign({}, color, {rating: action.payload.rating}))\n                return {\n                    ...color,\n                    rating: action.payload.rating\n                }\n            });\n            return {\n                ...state,\n                colors: newColors\n            }\n            \n        default:\n        return state\n    }\n}\n\nvar searchState = {\n    searchQuery: ''\n}\n\nexport const searchReducer = (state = searchState, action = {}) => {\n    switch(action.type){\n        case Constants.SEARCH_COLORS:\n             return{\n                 ...state,\n                 searchQuery: action.payload\n             }   \n\n        default:\n        return state\n    }\n}\n","export const defaultColors = [\n    {\n        id: 1,\n        title: 'Fire Red',\n        color: '#f30202',\n        rating: 4\n    },\n    {\n        id: 2,\n        title: 'Ocean Blue',\n        color: '#0a78dc',\n        rating: 5\n    },\n    {\n        id: 3,\n        title: 'Nature Green',\n        color: '#30a530',\n        rating: 2\n    },\n    {\n        id: 4,\n        title: 'Bee Yellow',\n        color: '#ffe44e',\n        rating: 1\n    },\n    {\n        id: 5,\n        title: 'Lady Pink',\n        color: '#ff00ff',\n        rating: 2\n    },\n    {\n        id: 6,\n        title: 'Gold',\n        color: '#f3cd00',\n        rating: 4\n    },\n]","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport {createStore, applyMiddleware, combineReducers} from 'redux'\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'\nimport {mainReducer, searchReducer} from './reducers'\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({mainReducer, searchReducer})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}